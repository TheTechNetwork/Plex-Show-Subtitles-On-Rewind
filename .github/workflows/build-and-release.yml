name: Build and Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.0)'
        required: true
      prerelease:
        description: 'Is this a pre-release?'
        type: boolean
        default: false

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build for Windows (x64)
        run: |
          dotnet publish -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -p:Version=${{ github.event.inputs.version }}

      - name: Prepare Windows asset
        run: |
          mkdir -p release-assets
          # Find the executable (it might have version in the filename)
          $WindowsExecutable = Get-ChildItem -Path "bin/Release/net9.0/win-x64/publish" -Filter "RewindSubtitleDisplayerForPlex*.exe" | Select-Object -First 1
          if ($WindowsExecutable) {
            Write-Host "Found Windows executable: $($WindowsExecutable.FullName)"
            Copy-Item $WindowsExecutable.FullName -Destination "release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_win-x64.exe"
          } else {
            Write-Host "ERROR: Windows executable not found!"
            Get-ChildItem -Path "bin/Release/net9.0/win-x64/publish" -Recurse | Format-Table Name, Length, LastWriteTime
            exit 1
          }
          
      - name: Test Windows executable
        run: |
          Write-Host "Testing Windows executable..."
          $ExePath = "release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_win-x64.exe"
          
          # Test if the executable runs with --help flag
          try {
            $process = Start-Process -FilePath $ExePath -ArgumentList "--help" -NoNewWindow -PassThru -Wait
            if ($process.ExitCode -ne 0) {
              Write-Host "ERROR: Executable returned non-zero exit code: $($process.ExitCode)"
              exit 1
            }
            Write-Host "Windows executable test passed!"
          } catch {
            Write-Host "ERROR: Failed to execute Windows binary: $_"
            exit 1
          }

      - name: Upload Windows artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-artifact
          path: release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_win-x64.exe
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build for Linux (x64)
        run: |
          dotnet publish -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -p:Version=${{ github.event.inputs.version }}

      - name: Prepare Linux asset
        run: |
          mkdir -p release-assets
          # Find the executable (it might have version in the filename)
          LINUX_EXECUTABLE=$(find bin/Release/net9.0/linux-x64/publish -type f -executable -name "RewindSubtitleDisplayerForPlex*" | head -n 1)
          if [ -n "$LINUX_EXECUTABLE" ]; then
            echo "Found Linux executable: $LINUX_EXECUTABLE"
            cp "$LINUX_EXECUTABLE" release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_linux-x64
            chmod +x release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_linux-x64
          else
            echo "ERROR: Linux executable not found!"
            find bin/Release/net9.0/linux-x64/publish -type f -ls
            exit 1
          fi
          
      - name: Test Linux executable
        run: |
          echo "Testing Linux executable..."
          EXECUTABLE="release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_linux-x64"
          
          # Test if the executable runs with --help flag
          if ! $EXECUTABLE --help; then
            echo "ERROR: Failed to execute Linux binary"
            exit 1
          fi
          
          echo "Linux executable test passed!"

      - name: Upload Linux artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-artifact
          path: release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_linux-x64
          if-no-files-found: error

  build-macos:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build for macOS (x64)
        run: |
          dotnet publish -c Release -r osx-x64 --self-contained true -p:PublishSingleFile=true -p:PublishTrimmed=true -p:Version=${{ github.event.inputs.version }}

      - name: Prepare macOS asset
        run: |
          mkdir -p release-assets
          # Find the executable (it might have version in the filename)
          MACOS_EXECUTABLE=$(find bin/Release/net9.0/osx-x64/publish -type f -perm +111 -name "RewindSubtitleDisplayerForPlex*" | head -n 1)
          if [ -n "$MACOS_EXECUTABLE" ]; then
            echo "Found macOS executable: $MACOS_EXECUTABLE"
            cp "$MACOS_EXECUTABLE" release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_osx-x64
            chmod +x release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_osx-x64
          else
            echo "ERROR: macOS executable not found!"
            find bin/Release/net9.0/osx-x64/publish -type f -ls
            exit 1
          fi
          
      - name: Test macOS executable
        run: |
          echo "Testing macOS executable..."
          EXECUTABLE="release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_osx-x64"
          
          # Test if the executable runs with --help flag
          if ! $EXECUTABLE --help; then
            echo "ERROR: Failed to execute macOS binary"
            exit 1
          fi
          
          echo "macOS executable test passed!"

      - name: Upload macOS artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-artifact
          path: release-assets/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_osx-x64
          if-no-files-found: error

  create-release:
    needs: [build-windows, build-linux, build-macos]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-assets

      - name: Prepare release assets
        run: |
          mkdir -p combined-assets
          find release-assets -type f -exec cp {} combined-assets/ \;
          ls -la combined-assets/

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: v${{ github.event.inputs.version }}
          draft: false
          prerelease: ${{ github.event.inputs.prerelease }}
          files: |
            combined-assets/*
          body: |
            ## Plex Show Subtitles On Rewind v${{ github.event.inputs.version }}
            
            ### Downloads
            - Windows: [RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_win-x64.exe](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_win-x64.exe)
            - Linux: [RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_linux-x64](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_linux-x64)
            - macOS: [RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_osx-x64](https://github.com/${{ github.repository }}/releases/download/v${{ github.event.inputs.version }}/RewindSubtitleDisplayerForPlex_${{ github.event.inputs.version }}_osx-x64)
            
            ### Docker
            Docker images are automatically built and published to GitHub Container Registry:
            ```
            docker pull ghcr.io/thetechnetwork/plex-show-subtitles-on-rewind:${{ github.event.inputs.version }}
            ```
            or
            ```
            docker pull ghcr.io/thetechnetwork/plex-show-subtitles-on-rewind:latest
            ```