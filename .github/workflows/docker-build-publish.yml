name: Build and Publish Docker Image (Multi-Platform)

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (leave empty to use latest release)'
        required: false
        default: ''

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Get version
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          else
            # Get latest release version if not specified
            LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
            if [[ $(echo "$LATEST_RELEASE" | jq -r '.message') == "Not Found" ]]; then
              echo "::error::No releases found in the repository. Please create a release first or specify a version."
              exit 1
            fi
            VERSION=$(echo "$LATEST_RELEASE" | jq -r .tag_name)
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          fi
          
          if [[ -z "$VERSION" || "$VERSION" == "null" ]]; then
            echo "::error::Could not determine a valid version. Please check releases or specify a version."
            exit 1
          fi
          
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Download Linux binary
        run: |
          # Download the Linux binary from the release
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # Get the download URL for the Linux binary
            DOWNLOAD_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/${{ github.event.release.tag_name }} | \
                          jq -r '.assets[] | select(.name | contains("linux-x64")) | .browser_download_url')
            
            if [[ -z "$DOWNLOAD_URL" || "$DOWNLOAD_URL" == "null" ]]; then
              echo "::error::Could not find Linux binary in release ${{ github.event.release.tag_name }}. Make sure the release contains a Linux x64 binary."
              exit 1
            fi
            
            # Download the binary
            echo "Downloading Linux binary from $DOWNLOAD_URL"
            curl -L -o ./Docker/RewindSubtitleDisplayerForPlex_${VERSION}_linux-x64 $DOWNLOAD_URL
            chmod +x ./Docker/RewindSubtitleDisplayerForPlex_${VERSION}_linux-x64
          else
            # For workflow_dispatch, check if the binary already exists in the Docker directory
            if [ $(find ./Docker -name "RewindSubtitleDisplayerForPlex_*_linux-x64" | wc -l) -gt 0 ]; then
              echo "Using existing Linux binary in Docker directory"
            else
              # Try to download from the latest release
              LATEST_RELEASE=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest)
              if [[ $(echo "$LATEST_RELEASE" | jq -r '.message') == "Not Found" ]]; then
                echo "::error::No releases found in the repository. Please create a release first or provide a Linux binary."
                exit 1
              fi
              
              DOWNLOAD_URL=$(echo "$LATEST_RELEASE" | jq -r '.assets[] | select(.name | contains("linux-x64")) | .browser_download_url')
              if [[ -z "$DOWNLOAD_URL" || "$DOWNLOAD_URL" == "null" ]]; then
                echo "::error::Could not find Linux binary in the latest release. Please create a release with a Linux x64 binary."
                exit 1
              fi
              
              # Download the binary
              echo "Downloading Linux binary from $DOWNLOAD_URL"
              curl -L -o ./Docker/RewindSubtitleDisplayerForPlex_${VERSION}_linux-x64 $DOWNLOAD_URL
              chmod +x ./Docker/RewindSubtitleDisplayerForPlex_${VERSION}_linux-x64
            fi
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Verify Docker build prerequisites
        run: |
          # Check if the Linux binary exists in the Docker directory
          LINUX_BINARY=$(find ./Docker -name "RewindSubtitleDisplayerForPlex_*_linux-x64" | head -n 1)
          if [ -z "$LINUX_BINARY" ]; then
            echo "::error::Linux binary not found in Docker directory. This is required for the Docker build."
            echo "Please ensure the release contains a Linux x64 binary with the correct naming format."
            exit 1
          fi
          
          # Test the Linux binary to make sure it's a valid executable
          echo "Testing Linux binary: $LINUX_BINARY"
          chmod +x "$LINUX_BINARY"
          
          # Try running with --help flag
          if ! "$LINUX_BINARY" --help; then
            echo "::error::Linux binary failed to execute with --help flag. This binary appears to be invalid."
            echo "Please ensure the release contains a functional Linux x64 binary."
            exit 1
          fi
          
          # Try running with --version flag
          if ! "$LINUX_BINARY" --version; then
            echo "::warning::Linux binary failed to execute with --version flag. This might be a problem."
            # Not failing the build for this, as some versions might not support --version
          else
            echo "Version check passed!"
          fi
          
          echo "Linux binary test passed!"

      - name: Build and push Docker image
        id: docker-build
        uses: docker/build-push-action@v5
        with:
          context: ./Docker
          file: ./Docker/Dockerfile
          push: true
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max
          tags: |
            ghcr.io/thetechnetwork/plex-show-subtitles-on-rewind:latest
            ghcr.io/thetechnetwork/plex-show-subtitles-on-rewind:${{ env.VERSION }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ github.event.release.published_at || github.event.repository.updated_at }}
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}
            
      - name: Test Docker image
        run: |
          echo "Testing Docker image..."
          docker pull ghcr.io/thetechnetwork/plex-show-subtitles-on-rewind:${{ env.VERSION }}
          
          # Create a test config directory
          mkdir -p test-config
          
          echo "Testing Docker image with --help flag..."
          # Run the container with --help flag to verify it works
          if ! docker run --rm \
            -v $(pwd)/test-config:/app/config \
            ghcr.io/thetechnetwork/plex-show-subtitles-on-rewind:${{ env.VERSION }} --help; then
            echo "::error::Docker container failed to run with --help flag"
            exit 1
          fi
          
          echo "Testing Docker image with --version flag..."
          # Run the container with --version flag to verify it works
          if ! docker run --rm \
            -v $(pwd)/test-config:/app/config \
            ghcr.io/thetechnetwork/plex-show-subtitles-on-rewind:${{ env.VERSION }} --version; then
            echo "::error::Docker container failed to run with --version flag"
            exit 1
          fi
          
          # Check if the container can start properly with a short timeout
          # This is just to verify it starts, not that it runs indefinitely
          echo "Testing container startup (short run)..."
          CONTAINER_ID=$(docker run -d \
            -v $(pwd)/test-config:/app/config \
            ghcr.io/thetechnetwork/plex-show-subtitles-on-rewind:${{ env.VERSION }} \
            --auth-device-name DockerTest --timeout 10)
          
          # Wait a moment for the container to start
          sleep 5
          
          # Check container logs
          docker logs $CONTAINER_ID
          
          # Check if container is still running
          if [ "$(docker inspect -f '{{.State.Running}}' $CONTAINER_ID)" = "true" ]; then
            echo "Container is running successfully"
            # Clean up
            docker stop $CONTAINER_ID
            docker rm $CONTAINER_ID
          else
            # Check exit code
            EXIT_CODE=$(docker inspect -f '{{.State.ExitCode}}' $CONTAINER_ID)
            if [ "$EXIT_CODE" = "0" ]; then
              echo "Container exited cleanly with exit code 0"
              docker rm $CONTAINER_ID
            else
              echo "::error::Container failed with exit code $EXIT_CODE"
              docker logs $CONTAINER_ID
              docker rm $CONTAINER_ID
              exit 1
            fi
          fi
          
          echo "Docker image test passed!"