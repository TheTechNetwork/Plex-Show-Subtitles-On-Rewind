name: Build and Publish Docker Image

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version tag (leave empty to use latest release)'
        required: false
        default: ''

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '9.0.x'

      - name: Get version
        id: get-version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && -n "${{ github.event.inputs.version }}" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION="${{ github.event.release.tag_name }}"
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          else
            # Get latest release version if not specified
            VERSION=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r .tag_name)
            VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download Linux binary
        run: |
          mkdir -p ./temp
          DOWNLOAD_URL=$(curl -s https://api.github.com/repos/${{ github.repository }}/releases/tags/v${{ env.VERSION }} | jq -r '.assets[] | select(.name | contains("linux-x64")) | .browser_download_url')
          if [ -z "$DOWNLOAD_URL" ]; then
            echo "Could not find Linux binary in release v${{ env.VERSION }}"
            exit 1
          fi
          echo "Downloading from: $DOWNLOAD_URL"
          curl -L -o ./temp/linux-binary.zip "$DOWNLOAD_URL"
          unzip -o ./temp/linux-binary.zip -d ./temp/
          cp ./temp/RewindSubtitleDisplayerForPlex_*_linux-x64 ./Docker/

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./Docker
          file: ./Docker/Dockerfile
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/plex-show-subtitles-on-rewind:latest
            ghcr.io/${{ github.repository_owner }}/plex-show-subtitles-on-rewind:${{ env.VERSION }}
          labels: |
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.created=${{ github.event.release.published_at || github.event.repository.updated_at }}
            org.opencontainers.image.version=${{ env.VERSION }}
            org.opencontainers.image.revision=${{ github.sha }}